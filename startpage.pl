#!/usr/bin/perl 
use strict;
use warnings;

use LWP::UserAgent;
use LWP::Protocol::https;
use Mojo::DOM;
use Text::Wrap;
use Term::ANSIColor;
use Getopt::Std;

binmode STDOUT, ":encoding(UTF-8)"; 

#
#sub getPageLite {
#	my $browser = TinyWWW::UserAgent->new;
#}

sub getPage {
	my $browser = LWP::UserAgent->new;
	my $input = "$_[0]";
	
	if (!$_[1]) {
	$browser->agent("Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0");}
	else { $browser->agent("$_[1]");}
    
	my $url = 'https://www.startpage.com/do/search';
	
	my $response = $browser -> post( $url, [ 'query' => "$input" ] );
  	die "error: ", $response -> status_line
   		unless $response -> is_success;
  	die "Weird content type at $url -- ", $response -> content_type
  		 unless $response -> content_type eq 'text/html';
	my $return = $response -> decoded_content;

	return $return;
}


sub parsePage {
	local $SIG{__WARN__} = sub { };		# Supress warnings generated by Mojo::DOM (sorry)
	my $page = "$_[0]";
	my $dom = Mojo::DOM->new($page);
	
	my @divs = $dom -> find("div.result") ->  each; 
	if (!@divs) { print "\nNo results found. Sorry!\n\n"; return; }

	
	my $result;
	my $i = 0;
	
	foreach (@divs) {
		my $divDom = Mojo::DOM -> new($divs[$i]);	
		$i++;

		$result .= colored(['yellow'],"\n" . $divDom	
				-> find("span.result_url_heading")
				-> map('text')	
				-> join(""), '' );
		$result .= colored ( ['blue'], "\n" . $divDom 	
				-> find("a[id^=title]")		
				-> map(attr => 'href')	
				-> join("") , '');
		$result .= "\n" . $divDom 	
				-> find("span[class=\"ellipsis\"]")
				-> map('text')		
				-> join("") . "\n"; 	 
	
	}

	return $result;	
}


sub fondleSwitches {
	my $userAgent;
	my %options;
	
	getopts("q:U:", \%options);
	
	if (defined $options{U}) {
		$userAgent = $options{U};
	}
	if (defined $options{q}) {
		print "\n" . wrap("\t","\t", parsePage(getPage($options{q}, $userAgent))) . "\n" ;
	}
	return $userAgent;
}


{		
	my $clear = `clear`;
	my $query;
	print "\n" x 80;
		
	my $userAgent = fondleSwitches();

	while (1) {
		print '? ';
		chomp($query = <STDIN>);
			
		if (!$query or $query =~ /^\s*$/ ) 			{ redo };
		if ($query eq "exit" || $query eq "quit" ) 	{ exit };
		
		print $clear;
		print "\n". wrap("\t","\t", parsePage(getPage($query, $userAgent ))) . "\n" ;
	}
		
}

